# Note: Name of file should match name of robot in URDF

# Robot Execution Speed
main_velocity_scaling_factor: 0.7 # moving between cartesian paths
approach_velocity_scaling_factor: 0.2
lift_velocity_scaling_factor: 0.1
retreat_velocity_scaling_factor: 0.6
calibration_velocity_scaling_factor: 0.5  #0.1

# Sleep timers
wait_before_grasp: 0.1
wait_after_grasp: 1.0

# Poses
start_pose: home
right_arm_dropoff_pose: home
# left_arm_dropoff_pose: left_goal_bin_pose_DISABLED

# Cartesian path config ------------------
jump_threshold: 4 # REMOVE

# Semantics ------------------------------
dual_arm: false
right_hand_name: gripper
left_hand_name: gripper_DISABLED
right_arm_name: arm
right_arm_only_name: arm
left_arm_name: manipulator_DISABLED
both_arms_name: manipulator_DISABLED

# Topics ---------------------------------
joint_state_topic: /iiwa_7_r800/joint_states

# Test data ------------------------------
test:
  test_joint_limit_joint: 1  # starts at 0, negative number means test all
  test_double: 0.05 # for anything
  # During development it is nice to have ability to tweak a value
  test_pose: [0.0, 0.0, -0.2, 0, 0, 0] # x,y,z,r,p,y
  
# Teleoperation --------------------------
teleoperation:
  compute_ik_freq: 10 # hz, how often to compute a new cartesian path using IK
  command_freq: 1000 # hz, how often to send new ROS messages to ros_controllers
  vel_scaling_factor: 0.75
  ik_consistency_limit: 3.14 #3 0.5
  ik_timeout: 0.1 #0.005  # 0 falls back to default in kinematics.yaml
  ik_attempts: 2 # 0 falls back to default in kinematics.yaml
  ik_cart_max_step: 0.01 # Resolution of trajectory, the maximum distance in Cartesian space between consecutive points on the resulting path  
  ik_cart_jump_threshold: 4 # Threshold for preventing consequtive joint values from 'jumping' by a large amount in joint space
  ee_offset: [0.0, 0.0, -0.1, 0, 0, 0] # x,y,z,r,p,y  
  visualization_rate: 30 # hz
  execution_delay: 5 # seconds, how long it takes to execute a trajectory onto hardware
  debug:
    ik_rate: true # measure timing
    command_rate: true # measure timing
    generated_traj_rate: true # measure freq of commands in our created joint trajetories

# Fix State Bounds -----------------------
start_state_max_dt: 0.5
start_state_max_bounds_error: 0.05 # overrides verion in ompl_planning_pipeline.launch.xml

behavior:
  end_effector_enabled: true
  super_auto: true
  # manipulation.cpp
  get_robot_state_from_pose__collision_checking_verbose: false